# ejoinctl

A command-line interface for EJOIN Multi-WAN Router HTTP API v2.2, providing SMS operations, device management, and status monitoring.

## Features

- **SMS Operations**: Send, pause, resume, delete, and query SMS messages with template support
- **Device Operations**: Lock/unlock ports, switch SIM cards, reset modules, save/reboot device
- **Status Monitoring**: Subscribe to device and port status notifications
- **Inbox Management**: Pull and browse received SMS messages
- **Template System**: Jinja2-based templating for SMS messages with built-in variables
- **Local Storage**: SQLite-based storage for task tracking and message history
- **Port Management**: Support for various port formats (1A, 2B, 1.01, ranges)
- **Proxy Configuration**: Manage HTTP/SOCKS5 proxy settings and IP whitelists/blacklists

## Installation

### From Source

```bash
git clone <repository>
cd gateway-manager
pip install -e .
```

### Using Docker

```bash
docker build -t ejoinctl .
docker run -it --rm ejoinctl --help
```

## Configuration

### Environment Variables

Create a `.env` file or set environment variables:

```bash
# Required
EJOIN_HOST=192.168.1.234
EJOIN_USER=root
EJOIN_PASS=your_password

# Optional
EJOIN_PORT=80
EJOIN_DB_PATH=./ejoinctl.db
EJOIN_CONNECT_TIMEOUT=10
EJOIN_READ_TIMEOUT=30
```

### Command Line Options

You can override environment settings with command line options:

```bash
ejoinctl --host 192.168.1.234 --user root --pass mypass <command>
```

## Quick Start

### Test Connection

```bash
ejoinctl test-connection
```

### Send SMS

```bash
# Basic SMS
ejoinctl sms send --to +15551234567 --text "Hello from port {{port}}" --ports 1A

# Multiple ports with template
ejoinctl sms send --to +15551234567 --text "Port {{port}} says hi at {{ts}}" --ports 1A,2B,3C

# Port range
ejoinctl sms spray --to +15551234567 --text "Probe from {{port}}" --ports 1A-4D

# With custom variables
ejoinctl sms send --to +15551234567 --text "Hello {{name}}" --ports 1A --var name=John
```

### Device Operations

```bash
# Lock ports
ejoinctl ops lock --ports 1A,2B

# Unlock ports  
ejoinctl ops unlock --ports 1A

# Switch SIM card
ejoinctl ops switch --ports 2.02
```

### Status Monitoring

```bash
# Subscribe to status updates
ejoinctl status subscribe --callback https://your-server.com/webhook --period 60
```

## SMS Templates

Templates use Jinja2 syntax with built-in variables:

- `{{port}}` - Current port identifier
- `{{ts}}` - Current UTC timestamp
- `{{idx}}` - Message index (0-based)

### Template Examples

```bash
# Basic template
--text "Port {{port}} online at {{ts}}"

# With custom variables
--text "Hello {{name}}, balance: ${{balance}}" --var name=John --var balance=42.50

# Conditional content
--text "Port {{port}}{% if status == 'ok' %}: OK{% else %}: Error{% endif %}"
```

### Built-in Filters

- `{{phone|phone('international')}}` - Format phone numbers
- `{{text|upper}}` - Convert to uppercase
- `{{text|truncate(50)}}` - Truncate text
- `{{value|pad_left(8, '0')}}` - Pad with zeros

## Port Formats

ejoinctl supports multiple port formats:

- **Alpha format**: `1A`, `2B`, `3C`, `4D`
- **Decimal format**: `1.01`, `2.02`, `3.03`, `4.04`
- **Ranges**: `1A-4D`, `1-4`, `2.01-2.04`
- **Lists**: `1A,2B,3C`
- **Mixed**: `1A,2B,4-8`
- **All ports**: `all`, `*`

## API Reference

The CLI wraps the EJOIN Multi-WAN Router HTTP API v2.2. Key endpoints:

- `/goip_post_sms.html` - Send SMS
- `/goip_send_cmd.html` - Device operations  
- `/goip_get_status.html` - Status subscription
- `/goip_get_sms.html` - Inbox queries
- `/proxy` - Proxy configuration
- `/ip_white_list`, `/ip_black_list` - IP access control

## Development

### Setup

```bash
make dev  # Install development dependencies
```

### Testing

```bash
make test     # Run tests
make lint     # Lint and format code
make check    # Run both lint and tests
```

### Building

```bash
make build    # Build package
make clean    # Clean build artifacts
```

## Safety Notes

- Always test commands with `--dry-run` first
- Be careful with device operations like reboot and reset
- IP blacklist `*` will block all access - ensure whitelist is configured first
- Keep backups of device configuration before major changes

## Troubleshooting

### Connection Issues

1. Check network connectivity to device
2. Verify credentials in `.env` file
3. Ensure device HTTP API is enabled
4. Check firewall settings

### SMS Sending Issues

1. Verify SIM cards are registered (`ejoinctl status subscribe`)
2. Check port status and balance
3. Validate phone number format
4. Review SMS task logs in local database

### Template Errors

1. Use `--dry-run` to preview rendered templates
2. Check variable names and syntax
3. Validate template variables with `--var key=value`

## License

This project is licensed under the MIT License.

## Support

For issues and questions:

1. Check the troubleshooting section
2. Review the API documentation  
3. Check device logs and status
4. Test with minimal examples first