name: "Auto-Bump Version"
# "Every little thing gonna be alright" - automatic version increment on every push
# This ensures development version always advances with each commit

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '.github/**'

jobs:
  auto-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: "🌈 Checkout the magnificent codebase"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: "🎭 Set up Python environment"
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: "📦 Install dependencies"
      run: |
        python -m pip install --upgrade pip
        pip install tomlkit
        
    - name: "🔍 Check if version bump is needed"
      id: check
      run: |
        # Skip if commit message contains [skip version]
        if git log -1 --pretty=%B | grep -q '\[skip version\]'; then
          echo "skip=true" >> $GITHUB_OUTPUT
          echo "Skipping version bump - [skip version] found in commit message"
          exit 0
        fi
        
        # Skip if commit is a version bump itself
        if git log -1 --pretty=%B | grep -q '^chore(version): bump to'; then
          echo "skip=true" >> $GITHUB_OUTPUT
          echo "Skipping version bump - this is already a version bump commit"
          exit 0
        fi
        
        echo "skip=false" >> $GITHUB_OUTPUT
        echo "Version bump needed"
        
    - name: "🔢 Calculate new development version"
      id: version
      if: steps.check.outputs.skip == 'false'
      run: |
        python << 'EOF'
        import json
        import tomllib
        import sys
        import re
        
        # Load current version from version registry
        with open('version_registry.json', 'r') as f:
            registry = json.load(f)
        
        current_dev_version = registry['versions']['development']
        print(f"Current development version: {current_dev_version}")
        
        # Parse version parts
        version_match = re.match(r'^(\d+)\.(\d+)\.(\d+)$', current_dev_version)
        if not version_match:
            print(f"ERROR: Invalid version format: {current_dev_version}")
            sys.exit(1)
            
        major, minor, patch = map(int, version_match.groups())
        
        # Increment patch version for development
        new_version = f"{major}.{minor}.{patch + 1}"
        print(f"New development version: {new_version}")
        
        # Set outputs
        with open('$GITHUB_OUTPUT', 'a') as f:
            f.write(f"current_version={current_dev_version}\n")
            f.write(f"new_version={new_version}\n")
            f.write(f"tag=v{new_version}\n")
        EOF
        
    - name: "📝 Update version registry and sync all files"
      if: steps.check.outputs.skip == 'false'
      run: |
        python << 'EOF'
        import json
        from datetime import datetime, timezone
        
        # Update development version in registry
        with open('version_registry.json', 'r') as f:
            registry = json.load(f)
            
        new_version = "${{ steps.version.outputs.new_version }}"
        registry['versions']['development'] = new_version
        registry['_meta']['updated'] = datetime.now(timezone.utc).isoformat()
        
        with open('version_registry.json', 'w') as f:
            json.dump(registry, f, indent=2)
            
        print(f"✅ Updated development version in registry: {new_version}")
        EOF
        
        # Sync all files with the registry
        python3 scripts/version_sync.py
        
    - name: "📝 Commit and push version bump"
      if: steps.check.outputs.skip == 'false'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action [auto-bump]"
        
        # Add all changed files
        git add version_registry.json pyproject.toml boxofports/ Dockerfile scripts/ docs/
        
        # Check if there are actually changes to commit
        if git diff --cached --quiet; then
          echo "No version changes detected, skipping commit"
          exit 0
        fi
        
        git commit -m "chore(version): auto-bump development to ${{ steps.version.outputs.new_version }}
        
        🔄 Automatic version increment on push
        - Updated version registry: development → ${{ steps.version.outputs.new_version }}
        - Synchronized all files with new development version
        - Ready for tag creation and Docker image build
        
        🎵 Keep on truckin'... the development train rolls on"
        
        git push
        echo "🎵 Development version auto-bumped to ${{ steps.version.outputs.new_version }}"
        
    - name: "🏷️ Create and push development tag"
      if: steps.check.outputs.skip == 'false'
      run: |
        git tag -a "${{ steps.version.outputs.tag }}" -m "Development release ${{ steps.version.outputs.new_version }}
        
        🔄 Auto-generated development release
        - Incremented from ${{ steps.version.outputs.current_version }}
        - Contains latest changes from main branch
        - Will trigger Docker image build for 'latest' tag"
        
        git push origin "${{ steps.version.outputs.tag }}"
        echo "🏷️ Created and pushed development tag: ${{ steps.version.outputs.tag }}"
        
    - name: "🎉 Summary"
      if: steps.check.outputs.skip == 'false'
      run: |
        echo "🎵 Auto-bump completed successfully!"
        echo "  Previous: ${{ steps.version.outputs.current_version }}"
        echo "  New: ${{ steps.version.outputs.new_version }}"
        echo "  Tag: ${{ steps.version.outputs.tag }}"
        echo ""
        echo "🚀 This tag will trigger:"
        echo "  • Docker image build with tag: latest"
        echo "  • Version sync across all files"
        echo "  • Available for dev track users immediately"
        echo ""
        echo "🌊 The development river keeps flowing..."
        
    - name: "ℹ️ Skipped"
      if: steps.check.outputs.skip == 'true'
      run: |
        echo "🎵 Auto-bump skipped"
        echo "Reason: Version bump not needed for this commit"