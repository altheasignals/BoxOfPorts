name: auto-bump-version

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      bump:
        description: 'Bump type: patch | minor | major'
        required: false
        default: 'patch'
      base:
        description: 'Override base version (e.g., 1.2.10). When set, skips Docker/tag detection.'
        required: false

permissions:
  contents: write

concurrency:
  group: auto-bump-version
  cancel-in-progress: false

env:
  REGISTRY: docker.io
  IMAGE_NAME: altheasignals/boxofports
  DOCKER_REF: docker.io/altheasignals/boxofports:latest

jobs:
  bump:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Capture commit message
        id: msg
        run: |
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "${{ github.event.head_commit.message }}" >> $GITHUB_OUTPUT || true
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Respect [skip version]
        id: skipcheck
        run: |
          msg="${{ steps.msg.outputs.message }}"
          if echo "$msg" | grep -qi '\[skip version\]'; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Commit requests to skip version bump. Exiting."
            exit 0
          fi
          echo "skip=false" >> $GITHUB_OUTPUT

      - name: Determine bump type
        id: bumptype
        if: steps.skipcheck.outputs.skip == 'false'
        run: |
          bump="${{ github.event.inputs.bump }}"
          msg="${{ steps.msg.outputs.message }}"
          if [ -z "$bump" ] || [ "$bump" = "patch" ]; then
            if echo "$msg" | grep -qi 'bump:major'; then bump="major"; fi
            if echo "$msg" | grep -qi 'bump:minor'; then bump="minor"; fi
            [ -z "$bump" ] && bump="patch"
          fi
          case "$bump" in
            major|minor|patch) echo "bump=$bump" >> $GITHUB_OUTPUT ;;
            *) echo "Invalid bump type '$bump'"; exit 1 ;;
          esac
          echo "Using bump type: $bump"

      - name: Install tools
        if: steps.skipcheck.outputs.skip == 'false'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq skopeo

      - name: Read Docker :latest version label
        id: dockerver
        if: steps.skipcheck.outputs.skip == 'false' && github.event.inputs.base == ''
        env:
          DH_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DH_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          if [ -n "$DH_USER" ] && [ -n "$DH_TOKEN" ]; then
            AUTH="--creds ${DH_USER}:${DH_TOKEN}"
          else
            AUTH=""
          fi
          version=""
          if skopeo inspect $AUTH docker://${{ env.DOCKER_REF }} > /tmp/ins.json 2>/dev/null; then
            version=$(jq -r '.Labels["org.opencontainers.image.version"] // .Labels["io.boxofports.version"] // empty' /tmp/ins.json)
          fi
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Fallback to latest semver git tag (vX.Y.Z)
        id: gittag
        if: steps.skipcheck.outputs.skip == 'false' && github.event.inputs.base == '' && steps.dockerver.outputs.version == ''
        run: |
          git fetch --tags --force
          latest_tag=$(git tag -l "v[0-9]*.[0-9]*.[0-9]*" | sort -V | tail -n1)
          if [ -n "$latest_tag" ]; then
            echo "version=${latest_tag#v}" >> $GITHUB_OUTPUT
          else
            echo "version=0.0.0" >> $GITHUB_OUTPUT
          fi

      - name: Select base version
        id: base
        if: steps.skipcheck.outputs.skip == 'false'
        run: |
          manual="${{ github.event.inputs.base }}"
          docker_v="${{ steps.dockerver.outputs.version }}"
          git_v="${{ steps.gittag.outputs.version }}"
          if [ -n "$manual" ]; then base="$manual"
          elif [ -n "$docker_v" ]; then base="$docker_v"
          elif [ -n "$git_v" ]; then base="$git_v"
          else base="0.0.0"
          fi
          echo "version=$base" >> $GITHUB_OUTPUT
          echo "Base version: $base"

      - name: Compute next version
        id: nextver
        if: steps.skipcheck.outputs.skip == 'false'
        run: |
          python3 - << 'PY'
import os, re, sys
base = os.environ.get("BASE") or ""
bump = os.environ.get("BUMP") or "patch"
m = re.match(r'^(\d+)\.(\d+)\.(\d+)$', base)
if not m:
    print(f"::error::Base version '{base}' is not valid X.Y.Z")
    sys.exit(1)
major, minor, patch = map(int, m.groups())
if bump == "major":
    major, minor, patch = major+1, 0, 0
elif bump == "minor":
    minor, patch = minor+1, 0
else:
    patch += 1
print(f"::set-output name=next::{major}.{minor}.{patch}")
PY
        env:
          BASE: ${{ steps.base.outputs.version }}
          BUMP: ${{ steps.bumptype.outputs.bump }}

      - name: Export next version
        if: steps.skipcheck.outputs.skip == 'false'
        run: echo "NEXT_VERSION=${{ steps.nextver.outputs.next }}" >> $GITHUB_ENV

      - name: Create annotated tag v${{ env.NEXT_VERSION }}
        if: steps.skipcheck.outputs.skip == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          tag="v${NEXT_VERSION}"
          if git rev-parse "$tag" >/dev/null 2>&1; then
            echo "Tag $tag already exists. Nothing to do."
            exit 0
          fi
          git tag -a "$tag" -m "ci: auto-bump to ${NEXT_VERSION}"
          git push origin "$tag"
          echo "Created and pushed tag $tag"
