name: promote-stable

on:
  workflow_dispatch:
    inputs:
      target_version:
        description: 'Version to promote (X.Y.Z)'
        required: true
      update_release:
        description: 'Flip GitHub Release to non-prerelease (true|false)'
        required: false
        default: 'true'

permissions:
  contents: write

concurrency:
  group: promote-stable
  cancel-in-progress: false

env:
  REGISTRY: docker.io
  IMAGE: docker.io/altheasignals/boxofports

jobs:
  promote:
    runs-on: ubuntu-latest
    steps:
      - name: Validate input
        run: |
          V="${{ github.event.inputs.target_version }}"
          if ! echo "$V" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "::error::Invalid version '$V'. Expected X.Y.Z"
            exit 1
          fi

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Resolve digest for :X.Y.Z
        id: digest
        run: |
          V="${{ github.event.inputs.target_version }}"
          out=$(docker buildx imagetools inspect "${IMAGE}:${V}") || true
          digest=$(echo "$out" | sed -n 's/^Name:\s\+\(.*@sha256:[0-9a-f]\+\).*$/\1/p' | head -n1 | awk -F@ '{print $2}')
          if [ -z "$digest" ]; then
            echo "::error::Could not resolve digest for ${IMAGE}:${V}. Make sure it was built by publish-on-tag."
            exit 1
          fi
          echo "digest=$digest" >> $GITHUB_OUTPUT
          echo "Resolved digest: $digest"

      - name: Point :stable to the chosen digest
        run: |
          docker buildx imagetools create \
            -t "${IMAGE}:stable" \
            "${IMAGE}@${{ steps.digest.outputs.digest }}"

      - name: Flip GitHub Release to non-prerelease (optional)
        if: github.event.inputs.update_release == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const tag = `v${{ github.event.inputs.target_version }}`;
            try {
              const { data: rels } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              const rel = rels.find(r => r.tag_name === tag);
              if (!rel) {
                core.info(`No release found for ${tag}. Skipping flip.`);
              } else if (rel.prerelease) {
                await github.rest.repos.updateRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: rel.id,
                  prerelease: false
                });
                core.info(`Release ${tag} flipped to non-prerelease.`);
              } else {
                core.info(`Release ${tag} already non-prerelease.`);
              }
            } catch (e) {
              core.warning(`Failed to update release: ${e.message}`);
            }

      - name: Emit summary
        run: |
          echo "Promoted ${{ github.event.inputs.target_version }} to :stable" >> $GITHUB_STEP_SUMMARY
