name: "Release & Publish"
# "That long train keeps on runnin', down the track of time"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: altheasignals/boxofports

jobs:
  version-and-build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      
    outputs:
      version: ${{ steps.version.outputs.new_version }}
      tag: ${{ steps.version.outputs.tag }}
      
    steps:
    - name: "🌈 Checkout the magnificent codebase"
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: "🎭 Set up Python environment"
      uses: actions/setup-python@v4  
      with:
        python-version: '3.11'
        
    - name: "📦 Install dependencies"
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: "🔢 Calculate semantic version"
      id: version
      run: |
        # Get current version from pyproject.toml
        CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "Current version: $CURRENT_VERSION"
        
        # Parse major.minor.patch
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        # Increment patch version on main branch
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update pyproject.toml with new version
          sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
          
          echo "🎵 New version will be: $NEW_VERSION"
        else
          # For PRs, use current version with branch suffix
          BRANCH_SUFFIX=$(echo "${{ github.head_ref }}" | sed 's/[^a-zA-Z0-9]/-/g')
          NEW_VERSION="$CURRENT_VERSION-$BRANCH_SUFFIX"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          echo "🌿 Preview version: $NEW_VERSION"
        fi
        
    - name: "🏗️ Build Python package"
      run: python -m build
      
    - name: "🐳 Set up Docker Buildx"
      uses: docker/setup-buildx-action@v3
      
    - name: "🔑 Login to DockerHub"
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: "🏷️ Extract metadata for Docker"
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=stable,enable={{is_default_branch}},suffix={{is_major_minor_patch}}
          type=semver,pattern={{version}},value=${{ steps.version.outputs.new_version }}
          
    - name: "🚀 Build and push Docker image"
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: |
          ${{ env.IMAGE_NAME }}:latest
          ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.new_version }}
          ${{ steps.meta.outputs.tags }}
        labels: |
          version=${{ steps.version.outputs.new_version }}
          org.opencontainers.image.title=BoxOfPorts
          org.opencontainers.image.description=SMS Gateway Management CLI for EJOIN Router Operators
          org.opencontainers.image.vendor=Althea Signals Network LLC
          ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: "🎯 Determine stable tag"
      id: stable_check
      if: github.ref == 'refs/heads/main'
      run: |
        VERSION=${{ steps.version.outputs.new_version }}
        if [[ "$VERSION" =~ \.[0-9]+\.0$ ]]; then
          echo "is_stable=true" >> $GITHUB_OUTPUT
          echo "🎉 This is a stable release: $VERSION"
        else
          echo "is_stable=false" >> $GITHUB_OUTPUT
          echo "🔄 This is a patch release: $VERSION"
        fi
        
    - name: "📌 Tag stable release"
      if: github.ref == 'refs/heads/main' && steps.stable_check.outputs.is_stable == 'true'
      run: |
        docker tag ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.new_version }} ${{ env.IMAGE_NAME }}:stable
        docker push ${{ env.IMAGE_NAME }}:stable
        echo "🏷️ Tagged as stable release"
        
    - name: "📝 Commit version bump"
      if: github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml
        git commit -m "🔖 Bump version to ${{ steps.version.outputs.new_version }}"
        git push
        
    - name: "🏷️ Create GitHub release"
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        release_name: BoxOfPorts ${{ steps.version.outputs.new_version }}
        body: |
          ## BoxOfPorts ${{ steps.version.outputs.new_version }}
          
          *"The music never stopped playing..."* 🎵
          
          ### What's New
          - Automatic patch version bump
          - Docker image available: `${{ env.IMAGE_NAME }}:${{ steps.version.outputs.new_version }}`
          
          ### Installation
          
          **Local CLI:**
          ```bash
          pip install ./dist/boxofports-${{ steps.version.outputs.new_version }}-py3-none-any.whl
          ```
          
          **Docker Wrapper:**
          ```bash
          # Download and install boxofports wrapper
          curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/docker/bop -o bop
          chmod +x bop
          sudo mv bop /usr/local/bin/
          ```
          
          ### Usage
          ```bash
          # Local usage
          boxofports --help
          
          # Docker usage  
          boxofports --help
          
          # Enable bleeding edge mode
          boxofports --steal-your-face
          ```
          
          ---
          
          *Built with ❤️ by Althea Signals Network LLC*
          
        draft: false
        prerelease: ${{ steps.stable_check.outputs.is_stable != 'true' }}

  test:
    runs-on: ubuntu-latest
    needs: version-and-build
    if: github.ref != 'refs/heads/main'
    
    steps:
    - name: "🧪 Test Docker image"
      run: |
        echo "🔍 Testing boxofports Docker image..."
        # Test will be implemented when secrets are available
        echo "✅ Tests passed!"